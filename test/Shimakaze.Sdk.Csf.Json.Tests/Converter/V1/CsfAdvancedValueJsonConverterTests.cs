using System.Text;
using System.Text.Json;

using Shimakaze.Sdk.Csf.Json.Converter.V1;

namespace Shimakaze.Sdk.Csf.Json.Tests.Converter.V1;

[TestClass]
public class CsfAdvancedValueJsonConverterTests
{
    private readonly CsfAdvancedValueJsonConverter _converter = new();
    private JsonSerializerOptions? _options;

    // This is the test method for Read method
    [TestMethod]
    public void ReadShouldReturnCorrectCsfValue()
    {
        // Arrange
        var json = """{"value":"Hello","extra":"World"}"""u8;
        var reader = new Utf8JsonReader(json);
        reader.Read(); // Move to the start object token

        // Act
        var result = _converter.Read(ref reader, typeof(CsfValue), _options!);

        // Assert
        Assert.IsNotNull(result);
        Assert.IsInstanceOfType(result, typeof(CsfValue));
        Assert.AreEqual("Hello", result.Value);
        Assert.AreEqual("World", result.ExtraValue);
    }

    // Generated by Sydney This is the test method for Read method
    [TestMethod]
    public void ReadShouldReturnCorrectCsfValue1()
    {
        // Arrange
        var json = """{"value":"Hello","extra":"World"}"""u8;
        var reader = new Utf8JsonReader(json);
        reader.Read(); // Move to the start object token

        // Act
        var result = _converter.Read(ref reader, typeof(CsfValue), _options!);

        // Assert
        Assert.IsNotNull(result);
        Assert.IsInstanceOfType(result, typeof(CsfValue));
        Assert.AreEqual("Hello", result.Value);
    }

    [TestInitialize]
    public void Startup()
    {
        _options ??= new();
        foreach (var item in CsfJsonSerializerOptions.Converters)
            _options.Converters.Add(item);
    }

    // This is the test method for Write method
    [TestMethod]
    public void WriteShouldWriteCorrectJson()
    {
        // Arrange
        var value = new CsfValue("Hello", "World");
        using var ms = new MemoryStream();
        using var writer = new Utf8JsonWriter(ms);

        // Act
        _converter.Write(writer, value, _options!);
        // Flush the writer to get the json bytes
        writer.Flush();
        var json = Encoding.UTF8.GetString(ms.ToArray());

        // Assert
        Assert.AreEqual("""{"value":"Hello","extra":"World"}""", json);
    }
}